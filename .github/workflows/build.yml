name: CI

on: [push]

env:
  BUILD_DIR: _build
  PIP_PACKAGES: >-
    meson!=1.8.0
    cmake
    ninja
    gcovr
  PIP_EXTRAS: >-
    pkgconfig
    pytest
    pytest-cov
    cffi
    numpy
    ase
    matplotlib
    qcelemental

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        build-type: [debug]

        include:
          - os: ubuntu-latest
            build-type: debug
            toolchain:
              {
                compiler: gcc,
                version: "12",
                mkl_version: "2024.1",
                build: fpm,
              }

    defaults:
      run:
        shell: bash

    env:
      PYTHON_V: 3.9

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_V }}

      - name: Install LAPACK (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y liblapack-dev

      - name: Install fpm
        uses: fortran-lang/setup-fpm@v7 # fpm 0.11.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare for cache restore
        run: |
          sudo mkdir -p /opt/intel
          sudo chown $USER /opt/intel

      - name: Cache Intel installation
        id: cache-install
        uses: actions/cache@v4
        with:
          path: /opt/intel/oneapi
          key: install-${{ matrix.toolchain.compiler }}-${{ matrix.toolchain.version }}-${{ matrix.toolchain.mkl_version }}-${{ matrix.os }}

      - name: Install GCC Compiler
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: ${{ matrix.toolchain.compiler }}
          version: ${{ matrix.toolchain.version }}

      - name: Install Intel Compiler (Linux)
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: ${{ matrix.toolchain.compiler }}
          version: ${{ matrix.toolchain.version }}

      - name: Install Intel MKL (gcc, fpm)
        run: |
          sudo apt-get install intel-oneapi-mkl-${{ matrix.toolchain.mkl_version }} intel-oneapi-mkl-devel-${{ matrix.toolchain.mkl_version }}
      
      # - name: Intel Apt repository
      #   timeout-minutes: 1
      #   run: |
      #     wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
      #     sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
      #     rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
      #     echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
      #     sudo apt-get update

      # - name: Install Intel MPI and MKL
      #   timeout-minutes: 5
      #   run: |
      #     sudo apt-get install intel-oneapi-mkl intel-oneapi-mkl-devel

      - name: Setup Intel oneAPI environment
        run: |
          source /opt/intel/oneapi/setvars.sh
          printenv >> $GITHUB_ENV

      - name: Setup environment for Fortran and C compilers
        run: |
          FC="gfortran"
          CC="gcc"
          CXX="g++"
          echo "FC=$FC" >> $GITHUB_ENV
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV

      - name: Build library (fpm)
        run: |
          export LD_LIBRARY_PATH=/opt/intel/oneapi/mkl/latest/lib/intel64:$LD_LIBRARY_PATH
          export LIBRARY_PATH=/opt/intel/oneapi/mkl/latest/lib/intel64:$LIBRARY_PATH
          export FPM_CXXFLAGS=-DW_MKL
          export CPATH=/opt/intel/oneapi/mkl/latest/include:$CPATH
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$LIBRARY_PATH" >> $GITHUB_ENV
          echo "FPM_CXXFLAGS=$FPM_CXXFLAGS" >> $GITHUB_ENV
          echo "CPATH=$CPATH" >> $GITHUB_ENV
          fpm --version
          fpm build

      - name: Run unit tests (fpm)
        run: fpm test

  python:
    needs:
      - build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        gcc_v: ["12"]
        python_v: ["3.9", "3.10", "3.11", "3.12", "3.13"]

        include:
          - os: macos-latest
            gcc_v: "12"
            python_v: "3.12"

    env:
      FC: gfortran
      CC: gcc
      GCC_V: ${{ matrix.gcc_v }}
      PYTHON_V: ${{ matrix.python_v }}
      OMP_NUM_THREADS: 2,1
      TBLITE_OUTPUT: tblite-gcc-${{ matrix.gcc_v }}-${{ matrix.os }}.tar.xz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_v }}

      - name: Link LAPACK (macOS)
        if: ${{ contains(matrix.os, 'macos')}}
        run: |
          brew install openblas
          echo "PKG_CONFIG_PATH=/usr/local/opt/openblas/lib/pkgconfig" >> $GITHUB_ENV
          echo "LDFLAGS=-L/opt/homebrew/opt/openblas/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I/opt/homebrew/opt/openblas/include" >> $GITHUB_ENV

      - name: Install LAPACK (Linux)
        if: ${{ contains(matrix.os, 'ubuntu') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libblas-dev liblapack-dev

      - name: Install GCC Compiler
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: gcc
          version: ${{ matrix.gcc_v }}

      - name: Install meson and test dependencies
        run: pip3 install ${{ env.PIP_EXTRAS }}

      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.TBLITE_OUTPUT }}

      - name: Unpack package
        run: |
          tar xvf ${{ env.TBLITE_OUTPUT }}
          echo "TBLITE_PREFIX=$PWD/_dist" >> $GITHUB_ENV

      - name: Install Python extension module (pip)
        run: pip3 install . --user
        working-directory: python
        env:
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}:${{ env.TBLITE_PREFIX }}/lib/pkgconfig

      - name: Test Python API
        run: pytest --pyargs tblite --cov=tblite -vv
        env:
          LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}:${{ env.TBLITE_PREFIX }}/lib
          DYLD_LIBRARY_PATH: ${{ env.DYLD_LIBRARY_PATH }}:${{ env.TBLITE_PREFIX }}/lib

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
